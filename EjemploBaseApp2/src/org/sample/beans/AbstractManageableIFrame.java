/*
 *  ASTI Services (c) Â© 2010
 *  Consultoria de Software.
 */

/*
 * AbstractManageableIFrame.java
 *
 * Created on 7/05/2010, 12:53:54 PM
 */
package org.sample.beans;

//import com.astiservices.base.ui.IManageableView;
import org.sample.main.Principal;
import java.awt.Dimension;
import java.beans.PropertyVetoException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.JPanel;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;

/**
 *
 * @author developercircle
 */
public abstract class AbstractManageableIFrame extends javax.swing.JInternalFrame implements InternalFrameListener {

    protected  Principal mdi;
    protected JPanel panelView;
    protected JDesktopPane mdiContainer; 
    /** Creates new form AbstractManageableIFrame */
    
    public AbstractManageableIFrame(Principal mdi,JDesktopPane mdiContainer,String title) {
        this.mdi=mdi;
        this.mdiContainer=mdiContainer;
        addInternalFrameListener(this);
        setTitle(title);
        setMaximizable(true);
        setResizable(true);
        setClosable(true);
        Dimension d = new Dimension(800, 550);
        setSize(d);
        setPreferredSize(d);
        
        initComponetsOther();
        
    }
    public abstract void initComponetsOther();
    
    
    @Override
    public void internalFrameOpened(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameClosing(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameClosed(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameIconified(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameDeiconified(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameActivated(InternalFrameEvent e) {
    }

    @Override
    public void internalFrameDeactivated(InternalFrameEvent e) {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 341, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        if (isVisible()) {
            doDefaultCloseAction();
        }
        
        
    }//GEN-LAST:event_formInternalFrameClosing

    
    public void activate() {
        if (isVisible()) {
            toFront();
        } else {
            JPanel panel = panelView;
            this.getContentPane().add(panel);
            this.mdiContainer.add(this);
            this.pack();
            this.setLocation(UIUtils.getCenterLocationOnX(this.mdiContainer, this, 10));
        }
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
